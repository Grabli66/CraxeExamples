# Generated by Haxe 4.0.0-rc.2+175840a
# Hail to Mighty CRAXE!!!

{.experimental: "codeReordering".}

import nimboot

type 
    Some = ref object of HaxeEnum

    SomeValue[T] = ref object of Some
        v : T

    SomeNone = ref object of Some

proc newSomeValue[T](v:T) : SomeValue[T] {.inline.} =
    SomeValue[T](index: 1, v: v)

proc `$`(this: SomeValue) : string {.inline.} =
    result = $this[]

proc `==`(e1:SomeValue, e2:SomeValue) : bool {.inline.} =
    result = e1[] == e2[]

proc newSomeNone() : SomeNone {.inline.} =
    SomeNone(index: 0)

proc `$`(this: SomeNone) : string {.inline.} =
    result = $this[]

proc `==`(e1:SomeNone, e2:SomeNone) : bool {.inline.} =
    result = e1[] == e2[]

type 
    Box[T] = ref object of RootObj
        value : T

    StringBox = ref object of Box[string]

    Pair[K, V] = ref object of RootObj
        key : K
        value : V

    GenericsTest = ref object of RootObj

    GenericsTestStatic = object of RootObj


let GenericsTestStaticInst = GenericsTestStatic()

proc initBox[T](this:Box[T], value:T) {.inline.} =
    this.value = value

proc newBox[T](value:T) : Box[T] {.inline.} =
    result = Box[T]()
    initBox(result, value)

proc `$`(this:Box) : string {.inline.} = 
    result = "Box" & $this[]

proc initStringBox(this:StringBox, value:string) {.inline.} =
    initBox(this, value)

proc newStringBox(value:string) : StringBox {.inline.} =
    result = StringBox()
    initStringBox(result, value)

proc `$`(this:StringBox) : string {.inline.} = 
    result = "StringBox" & $this[]

proc initPair[K, V](this:Pair[K, V], key:K, value:V) {.inline.} =
    this.key = key
    this.value = value

proc newPair[K, V](key:K, value:V) : Pair[K, V] {.inline.} =
    result = Pair[K, V]()
    initPair(result, key, value)

proc `$`(this:Pair) : string {.inline.} = 
    result = "Pair" & $this[]

proc main(this:GenericsTestStatic) : void =
    var box = newBox[int](33)
    LogStaticInst.trace(box.value, "src/GenericsTest.hx", 30, "GenericsTest", "main")
    var pair = newPair[Box[string], int](newBox[string]("Hello"), 44)
    LogStaticInst.trace(pair.key, "src/GenericsTest.hx", 33, "GenericsTest", "main")
    LogStaticInst.trace(pair.value, "src/GenericsTest.hx", 34, "GenericsTest", "main")
    var stringBox = newStringBox("Batman")
    LogStaticInst.trace(stringBox, "src/GenericsTest.hx", 37, "GenericsTest", "main")
    var arr = newHaxeArray[StringBox]()
    discard arr.push(newStringBox("Superman"))
    discard arr.push(stringBox)
    LogStaticInst.trace(arr, "src/GenericsTest.hx", 42, "GenericsTest", "main")
    var none = newSomeNone()
    var enumArr = newHaxeArray[Some]()
    discard enumArr.push(newSomeValue(newPair[string, string]("Batman", "batman@gmail.com")))
    discard enumArr.push(none)
    LogStaticInst.trace(enumArr, "src/GenericsTest.hx", 48, "GenericsTest", "main")

proc `$`(this:GenericsTest) : string {.inline.} = 
    result = "GenericsTest" & $this[]

GenericsTestStaticInst.main()