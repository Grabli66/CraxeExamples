# Generated by Haxe 4.0.0-rc.2+77068e10c
# Hail to Mighty CRAXE!!!

{.experimental: "codeReordering".}

import nimboot

type 
    SimpleIntAbstr = int
    DollarAbstr = int
    User = ref object of RootObj
        id : int
        name : string

    SomeUserAbstr = User
    AbstractTest = ref object of RootObj

    AbstractTestStatic = object of RootObj


let AbstractTestStaticInst = AbstractTestStatic()

proc newDollarAbstr(v:int) : DollarAbstr =
    var this1:int
    if v == 33:
        this1 = 44
    else:
        this1 = v
    return this1

proc testDollarAbstr(this1:DollarAbstr, this11:string) : int =
    return this1 + this11.length

proc initUser(this:User) {.inline.} =
    this.id = 33

proc newUser() : User {.inline.} =
    result = User()
    initUser(result)

proc `$`(this:User) : string {.inline.} = 
    result = "User" & $this[]

proc newSomeUserAbstr(u:User) : SomeUserAbstr =
    var this1:User
    this1 = u
    return this1

proc testSomeUserAbstr(this1:SomeUserAbstr) : void =
    LogStaticInst.trace(this1.id, "src/AbstractTest.hx", 32, "_AbstractTest.SomeUser_Impl_", "test")

proc fromSomeUserAbstr(i:int) : SomeUserAbstr =
    var u = newUser()
    u.id = i
    u.name = "Batman"
    return newSomeUserAbstr(u)

proc toSomeUserAbstr(this1:SomeUserAbstr) : int =
    return this1.id

proc main(this:AbstractTestStatic) : void =
    var a = 33
    LogStaticInst.trace(a, "src/AbstractTest.hx", 50, "AbstractTest", "main")
    var dol = newDollarAbstr(22)
    LogStaticInst.trace(testDollarAbstr(dol, "GOOD"), "src/AbstractTest.hx", 53, "AbstractTest", "main")
    var d = fromSomeUserAbstr(44)
    testSomeUserAbstr(d)
    var i = toSomeUserAbstr(d)
    LogStaticInst.trace(i, "src/AbstractTest.hx", 58, "AbstractTest", "main")

proc `$`(this:AbstractTest) : string {.inline.} = 
    result = "AbstractTest" & $this[]

AbstractTestStaticInst.main()