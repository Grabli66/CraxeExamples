# Generated by Haxe 4.0.0-rc.2+77068e10c
# Hail to Mighty CRAXE!!!

{.experimental: "codeReordering".}

import craxecore
import db_sqlite

type 
    IConnection = tuple[
        obj : ref RootObj, 
        open : proc (connectionSettings:ConnectionSettings) : void, 
        exec : proc (sql:string) : void
    ]

converter toIConnection(this:SqliteConnection) : IConnection = 
    return (
        obj: this, 
        open : proc (connectionSettings:ConnectionSettings) : void = this.open(connectionSettings), 
        exec : proc (sql:string) : void = this.exec(sql)
    )


type 
    SqliteTest = ref object of HaxeObject

    SqliteTestStatic = object of HaxeObject

    DriverTypeAbstr = int
    ConnectionSettings = ref object of HaxeObject
        driver : DriverTypeAbstr
        database : string

    ConnectionSettingsStatic = object of HaxeObject

    Database = ref object of HaxeObject

    DatabaseStatic = object of HaxeObject

    SqliteConnection = ref object of HaxeObject
        nativeConn : DbConn


let SqliteTestStaticInst = SqliteTestStatic()
let ConnectionSettingsStaticInst = ConnectionSettingsStatic()
let DatabaseStaticInst = DatabaseStatic()

proc main(this:SqliteTestStatic) : void =
    var database = DatabaseStaticInst.opens("sqlite://test.db")
    database.exec("CREATE TABLE t(x INTEGER PRIMARY KEY ASC, y, z);")

proc `$`(this:SqliteTest) : string {.inline.} = 
    result = "SqliteTest" & $this[]

proc initConnectionSettings(this:ConnectionSettings, driver:DriverTypeAbstr, database:string) {.inline.} =
    this.driver = driver
    this.database = database

proc newConnectionSettings(driver:DriverTypeAbstr, database:string) : ConnectionSettings {.inline.} =
    result = ConnectionSettings()
    initConnectionSettings(result, driver, database)

proc parse(this:ConnectionSettingsStatic, value:string) : ConnectionSettings =
    return newConnectionSettings(0, "test.db")

proc `$`(this:ConnectionSettings) : string {.inline.} = 
    result = "ConnectionSettings" & $this[]

proc opens(this:DatabaseStatic, connection:string) : IConnection =
    var connectionString = ConnectionSettingsStaticInst.parse(connection)
    var connection1 = newSqliteConnection()   
    connection1.open(connectionString)
    return connection1

proc `$`(this:Database) : string {.inline.} = 
    result = "Database" & $this[]

proc initSqliteConnection(this:SqliteConnection) {.inline.} =
    discard

proc newSqliteConnection() : SqliteConnection {.inline.} =
    result = SqliteConnection()
    initSqliteConnection(result)

proc open(this:SqliteConnection, connectionSettings:ConnectionSettings) : void =
    this.nativeConn = db_sqlite.open(connectionSettings.database, "", "", "")

proc exec(this:SqliteConnection, sql:string) : void =
    this.nativeConn.exec(SqlQuery(sql))

proc `$`(this:SqliteConnection) : string {.inline.} = 
    result = "SqliteConnection" & $this[]

SqliteTestStaticInst.main()