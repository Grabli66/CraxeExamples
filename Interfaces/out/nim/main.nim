# Generated by Haxe 4.0.0-rc.2+175840a
# Hail to Mighty CRAXE!!!

{.experimental: "codeReordering".}

import nimboot

type 
    IUser = tuple[
        obj : ref RootObj,
        get_name : proc ():string,
        getKey : proc ():string
    ]

    ServiceUser = ref object of RootObj
        name : string

    Interfaces = ref object of RootObj

    InterfacesStatic = ref object of RootObj

let InterfacesStaticInst = InterfacesStatic()

proc toIUser(this:ServiceUser) : IUser =
    return (
        obj: this,
        get_name: proc():string {.closure.} = this.name,
        getKey: proc():string {.closure.} = this.getKey()
    )

proc initServiceUser(this:ServiceUser) {.inline.} =
    discard

proc newServiceUser() : ServiceUser {.inline.} =
    result = ServiceUser()
    initServiceUser(result)

proc getKey(this:ServiceUser) : string =
    return "12345"

proc `$`(this:ServiceUser) : string {.inline.} = 
    result = "ServiceUser" & $this[]

proc processUser(this:InterfacesStatic, user:IUser) : void =
    var key = user.getKey()
    LogStaticInst.trace(key, "src/Interfaces.hx", 19, "Interfaces", "processUser")
    LogStaticInst.trace(user.get_name(), "src/Interfaces.hx", 20, "Interfaces", "processUser")

proc main(this:InterfacesStatic) : void =
    var user = newServiceUser()
    InterfacesStaticInst.processUser(user.toIUser())

proc `$`(this:Interfaces) : string {.inline.} = 
    result = "Interfaces" & $this[]

InterfacesStaticInst.main()