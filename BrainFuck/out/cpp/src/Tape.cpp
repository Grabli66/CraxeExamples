// Generated by Haxe 4.0.0-rc.2+175840a
#include <hxcpp.h>

#ifndef INCLUDED_Tape
#include <Tape.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_65dcad0d932264fc_15_new,"Tape","new",0x945c12b4,"Tape.new","BrainFuck.hx",15,0xb976c171)
HX_LOCAL_STACK_FRAME(_hx_pos_65dcad0d932264fc_21_get,"Tape","get",0x9456c2ea,"Tape.get","BrainFuck.hx",21,0xb976c171)
HX_LOCAL_STACK_FRAME(_hx_pos_65dcad0d932264fc_24_inc,"Tape","inc",0x94584f32,"Tape.inc","BrainFuck.hx",24,0xb976c171)
HX_LOCAL_STACK_FRAME(_hx_pos_65dcad0d932264fc_30_move,"Tape","move",0x3b92aa3d,"Tape.move","BrainFuck.hx",30,0xb976c171)

void Tape_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_65dcad0d932264fc_15_new)
HXLINE(  16)		this->pos = 0;
HXLINE(  17)		this->tape = ::haxe::io::Bytes_obj::alloc(30000);
            	}

Dynamic Tape_obj::__CreateEmpty() { return new Tape_obj; }

void *Tape_obj::_hx_vtable = 0;

Dynamic Tape_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Tape_obj > _hx_result = new Tape_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Tape_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x37cfe8c2;
}

int Tape_obj::get(){
            	HX_STACKFRAME(&_hx_pos_65dcad0d932264fc_21_get)
HXDLIN(  21)		return ( (int)(this->tape->b->__get(this->pos)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tape_obj,get,return )

void Tape_obj::inc(int x){
            	HX_STACKFRAME(&_hx_pos_65dcad0d932264fc_24_inc)
HXLINE(  25)		int b = ( (int)(this->tape->b->__get(this->pos)) );
HXLINE(  26)		b = (b + x);
HXLINE(  27)		this->tape->b[this->pos] = ( (unsigned char)(b) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tape_obj,inc,(void))

void Tape_obj::move(int x){
            	HX_STACKFRAME(&_hx_pos_65dcad0d932264fc_30_move)
HXLINE(  31)		 ::Tape _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  31)		_hx_tmp->pos = (_hx_tmp->pos + x);
HXLINE(  32)		while((this->pos >= this->tape->length)){
HXLINE(  33)			this->tape = ::haxe::io::Bytes_obj::alloc((this->tape->length * 2));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tape_obj,move,(void))


hx::ObjectPtr< Tape_obj > Tape_obj::__new() {
	hx::ObjectPtr< Tape_obj > __this = new Tape_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Tape_obj > Tape_obj::__alloc(hx::Ctx *_hx_ctx) {
	Tape_obj *__this = (Tape_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Tape_obj), true, "Tape"));
	*(void **)__this = Tape_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Tape_obj::Tape_obj()
{
}

void Tape_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Tape);
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(tape,"tape");
	HX_MARK_END_CLASS();
}

void Tape_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(tape,"tape");
}

hx::Val Tape_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"inc") ) { return hx::Val( inc_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"tape") ) { return hx::Val( tape ); }
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Tape_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"tape") ) { tape=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Tape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pos",94,5d,55,00));
	outFields->push(HX_("tape",a2,bc,f6,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Tape_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Tape_obj,pos),HX_("pos",94,5d,55,00)},
	{hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(Tape_obj,tape),HX_("tape",a2,bc,f6,4c)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Tape_obj_sStaticStorageInfo = 0;
#endif

static ::String Tape_obj_sMemberFields[] = {
	HX_("pos",94,5d,55,00),
	HX_("tape",a2,bc,f6,4c),
	HX_("get",96,80,4e,00),
	HX_("inc",de,0c,50,00),
	HX_("move",11,e3,60,48),
	::String(null()) };

hx::Class Tape_obj::__mClass;

void Tape_obj::__register()
{
	Tape_obj _hx_dummy;
	Tape_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Tape",c2,e8,cf,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Tape_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Tape_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tape_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

