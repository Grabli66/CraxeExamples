// Generated by Haxe 4.0.0-rc.2+175840a
#ifndef INCLUDED_Program
#define INCLUDED_Program

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Operation)
HX_DECLARE_CLASS0(Program)
HX_DECLARE_CLASS0(Tape)



class HXCPP_CLASS_ATTRIBUTES Program_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Program_obj OBJ_;
		Program_obj();

	public:
		enum { _hx_ClassId = 0x18ff0680 };

		void __construct(::String text);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Program")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Program"); }
		static hx::ObjectPtr< Program_obj > __new(::String text);
		static hx::ObjectPtr< Program_obj > __alloc(hx::Ctx *_hx_ctx,::String text);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Program_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Program",64,72,4a,c1); }

		::String text;
		::Array< ::Dynamic> ops;
		int pos;
		::Array< ::Dynamic> parse();
		::Dynamic parse_dyn();

		void runInternal(::Array< ::Dynamic> operations, ::Tape tape);
		::Dynamic runInternal_dyn();

		void run();
		::Dynamic run_dyn();

};


#endif /* INCLUDED_Program */ 
