// Generated by Haxe 4.0.0-rc.2+175840a
#ifndef INCLUDED_BrainFuck
#define INCLUDED_BrainFuck

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(BrainFuck)



class HXCPP_CLASS_ATTRIBUTES BrainFuck_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef BrainFuck_obj OBJ_;
		BrainFuck_obj();

	public:
		enum { _hx_ClassId = 0x1c80a36d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="BrainFuck")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"BrainFuck"); }

		hx::ObjectPtr< BrainFuck_obj > __new() {
			hx::ObjectPtr< BrainFuck_obj > __this = new BrainFuck_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< BrainFuck_obj > __alloc(hx::Ctx *_hx_ctx) {
			BrainFuck_obj *__this = (BrainFuck_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BrainFuck_obj), false, "BrainFuck"));
			*(void **)__this = BrainFuck_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BrainFuck_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BrainFuck",6d,a3,80,1c); }

		static void main();
		static ::Dynamic main_dyn();

};


#endif /* INCLUDED_BrainFuck */ 
