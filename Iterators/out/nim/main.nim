# Generated by Haxe 4.0.0-rc.3+e3df7a448
# Hail to Mighty CRAXE!!!

{.experimental: "codeReordering".}

import craxecore

### Typedefs
type 
    Some = ref object of DynamicHaxeObject
        name:string
        test:proc():int

proc getFields(this:Some):HaxeArray[string] {.inline.} =
    return newHaxeArray[string](@["name", "test"])

proc getFieldByNameInternal(this:Some, name:string):Dynamic =
    case name
    of "name": return toDynamic(this.name)
    #of "test": return toDynamic(this.test)

proc setFieldByNameInternal(this:Some, name:string, value:Dynamic):void =
    case name
    of "name": this.name = fromDynamic(value, typeof(this.name))
    #of "test": this.test = fromDynamic(value, typeof(this.test))

proc makeDynamic(this:Some):Dynamic {.inline.} =
    this.getFields = proc():HaxeArray[string] = getFields(this)
    this.getFieldByName = proc(name:string):Dynamic = getFieldByNameInternal(this, name)
    this.setFieldByName = proc(name:string, value:Dynamic):void = setFieldByNameInternal(this, name, value)
    return toDynamic(this)

### Classes and structures
type 
    Role = ref object of HaxeObject
        name : string

    User = ref object of HaxeObject
        roles : Dynamic
        some : Dynamic

    IteratorsTest = ref object of HaxeObject

    IteratorsTestStatic = object of HaxeObject

let IteratorsTestStaticInst = IteratorsTestStatic()

proc initRole(this:Role, name:string) {.inline.} =
    this.name = name

proc newRole(name:string) : Role {.inline.} =
    var this = Role()
    initRole(this, name)
    return this

proc initUser(this:User, roles:HaxeArray[Role], some:Dynamic) {.inline.} =
    this.roles = toDynamic(roles.iterator())
    this.some = some

proc newUser(roles:HaxeArray[Role], some:Dynamic) : User {.inline.} =
    var this = User()
    initUser(this, roles, some)
    return this

proc `$`(this:Role) : string {.inline.} = 
    result = "Role" & $this[]

proc `$`(this:User) : string {.inline.} = 
    result = "User" & $this[]

proc main(this:IteratorsTestStatic) : void =
    var user = newUser(newHaxeArray(@[newRole("Admin"), newRole("User")]), makeDynamic(Some(name: "GOOD", test: 
        proc():int = 
            return 3
    )))
    
    var d = call(user.roles, "hasNext", proc():bool {.nimcall.})        
    while d:
        var role = call(user.roles, "next", proc():Role {.nimcall.})
        LogStaticInst.trace(role.name, "src/IteratorsTest.hx", 32, "IteratorsTest", "main")

proc `$`(this:IteratorsTest) : string {.inline.} = 
    result = "IteratorsTest" & $this[]


IteratorsTestStaticInst.main()