// Generated by Haxe 4.0.0-rc.2+175840a
#include <hxcpp.h>

#ifndef INCLUDED_MapTest
#include <MapTest.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e1ab70af4dbef441_16_main,"MapTest","main",0x57dba3b9,"MapTest.main","MapTest.hx",16,0x54ebe690)

void MapTest_obj::__construct() { }

Dynamic MapTest_obj::__CreateEmpty() { return new MapTest_obj; }

void *MapTest_obj::_hx_vtable = 0;

Dynamic MapTest_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MapTest_obj > _hx_result = new MapTest_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MapTest_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x56fb390a;
}

void MapTest_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_e1ab70af4dbef441_16_main)
HXLINE(  35)		 ::haxe::ds::StringMap objmap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  36)		{
HXLINE(  36)			int _g = 0;
HXDLIN(  36)			while((_g < 10000000)){
HXLINE(  36)				_g = (_g + 1);
HXDLIN(  36)				int i = (_g - 1);
HXLINE(  37)				objmap->set(::Std_obj::string(i),i);
            			}
            		}
HXLINE(  40)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  40)		_hx_tmp(objmap->get(HX_("1000",9f,0a,88,20)),hx::SourceInfo(HX_("src/MapTest.hx",1b,53,5d,ee),40,HX_("MapTest",ee,a4,46,ff),HX_("main",39,38,56,48)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MapTest_obj,main,(void))


MapTest_obj::MapTest_obj()
{
}

bool MapTest_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *MapTest_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *MapTest_obj_sStaticStorageInfo = 0;
#endif

hx::Class MapTest_obj::__mClass;

static ::String MapTest_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void MapTest_obj::__register()
{
	MapTest_obj _hx_dummy;
	MapTest_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("MapTest",ee,a4,46,ff);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MapTest_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MapTest_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< MapTest_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MapTest_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MapTest_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

