// Generated by Haxe 4.0.0-rc.2+175840a
#include <hxcpp.h>

#ifndef INCLUDED_ClassUser
#include <ClassUser.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8322c3ad4f734654_12_new,"ClassUser","new",0xc6a930f5,"ClassUser.new","TypedefTest.hx",12,0x1fc4cdc1)

void ClassUser_obj::__construct(int id,::String name,::String email){
            	HX_STACKFRAME(&_hx_pos_8322c3ad4f734654_12_new)
HXLINE(  13)		this->id = id;
HXLINE(  14)		this->name = name;
HXLINE(  15)		this->email = email;
            	}

Dynamic ClassUser_obj::__CreateEmpty() { return new ClassUser_obj; }

void *ClassUser_obj::_hx_vtable = 0;

Dynamic ClassUser_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ClassUser_obj > _hx_result = new ClassUser_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ClassUser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1430b20f;
}


ClassUser_obj::ClassUser_obj()
{
}

void ClassUser_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ClassUser);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(email,"email");
	HX_MARK_END_CLASS();
}

void ClassUser_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(email,"email");
}

hx::Val ClassUser_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"email") ) { return hx::Val( email ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ClassUser_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"email") ) { email=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ClassUser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("email",1c,cf,ce,6f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ClassUser_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ClassUser_obj,id),HX_("id",db,5b,00,00)},
	{hx::fsString,(int)offsetof(ClassUser_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsString,(int)offsetof(ClassUser_obj,email),HX_("email",1c,cf,ce,6f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ClassUser_obj_sStaticStorageInfo = 0;
#endif

static ::String ClassUser_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	HX_("name",4b,72,ff,48),
	HX_("email",1c,cf,ce,6f),
	::String(null()) };

hx::Class ClassUser_obj::__mClass;

void ClassUser_obj::__register()
{
	ClassUser_obj _hx_dummy;
	ClassUser_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("ClassUser",83,92,be,82);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ClassUser_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ClassUser_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ClassUser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ClassUser_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

