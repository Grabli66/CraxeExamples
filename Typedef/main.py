# Generated by Haxe 4.0.0-rc.2+175840a
# coding: utf-8



class _hx_AnonObject:
    def __init__(self, fields):
        self.__dict__ = fields
    def __repr__(self):
        return repr(self.__dict__)


class ClassUser:
    __slots__ = ("id", "name", "email")

    def __init__(self,id,name,email):
        self.id = id
        self.name = name
        self.email = email



class TypedefTest:
    __slots__ = ()

    @staticmethod
    def test(arr):
        _g = 0
        while (_g < len(arr)):
            it = (arr[_g] if _g >= 0 and _g < len(arr) else None)
            _g = (_g + 1)
            print(str(it.name))

    @staticmethod
    def main():
        arr = list()
        _g = 0
        while (_g < 1000000):
            i = _g
            _g = (_g + 1)
            arr.append(_hx_AnonObject({'id': 33, 'name': "GOOD", 'email': "good"}))
        print(str(len(arr)))


class python_internal_ArrayImpl:
    __slots__ = ()

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None


class python_internal_MethodClosure:
    __slots__ = ("obj", "func")

    def __init__(self,obj,func):
        self.obj = obj
        self.func = func

    def __call__(self,*args):
        return self.func(self.obj,*args)




TypedefTest.main()
