# Generated by Haxe 4.0.0-rc.2+77068e10c
# Hail to Mighty CRAXE!!!

{.experimental: "codeReordering".}

import nimboot
import asyncnet
import asyncdispatch

type 
    EchoServer = ref object of RootObj

    EchoServerStatic = object of RootObj


let EchoServerStaticInst = EchoServerStatic()

proc handleClient(this:EchoServerStatic, client:AsyncSocket) : void =
    client.recvLine().addCallback(
        proc(c:Future[string]):void = 
            var dat = c.read()
            if dat.length < 1:
                return
            LogStaticInst.trace(dat, "src/EchoServer.hx", 10, "EchoServer", "handleClient")
            discard client.send(dat)
            EchoServerStaticInst.handleClient(client)
            return
    )

proc accept(this:EchoServerStatic, server:AsyncSocket) : void =
    server.accept().addCallback(
        proc(s:Future[AsyncSocket]):void = 
            var client = s.read()
            EchoServerStaticInst.accept(server)
            EchoServerStaticInst.handleClient(client)
            return
    )

proc main(this:EchoServerStatic) : void =
    var sock = newAsyncSocket()
    sock.bindAddr(Port(26301))
    sock.listen()
    EchoServerStaticInst.accept(sock)
    runForever()

proc `$`(this:EchoServer) : string {.inline.} = 
    result = "EchoServer" & $this[]

EchoServerStaticInst.main()