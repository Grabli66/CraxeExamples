# Generated by Mighty Craxe
{.experimental: "codeReordering".}

proc apOperator[T](val:var T):T {.discardable, inline.} =        
    result = val
    inc(val)

proc bpOperator[T](val:var T):T {.discardable, inline.} =        
    inc(val)
    result = val

template `+`(s:string, i:untyped): string =
    s & $i

template `+`(i:untyped, s:string): string =
    $i & s

template `+`(s1:string, s2:string): string =
    s1 & s2

type
    HaxeEnum = object of RootObj
        tag:string
        index:int

    HaxeArray[T] = ref object of RootObj
        data : seq[T]

proc newHaxeArray[T]() : HaxeArray[T] =
    result = HaxeArray[T]()

template push[T](this:HaxeArray[T], value:T) =
    this.data.add(value)

template pop[T](this:HaxeArray[T]): T =
    let last = this.data.len - 1
    let res = this.data[last]
    delete(this.data, last)
    res

template get[T](this:HaxeArray[T], pos:int): T =
    this.data[pos]

template length[T](this:HaxeArray[T]): int =    
    this.data.len

proc `$`[T](this:HaxeArray[T]) : string {.inline.} =
    result = $this.data

type 
    MyValueSome = object of HaxeEnum
    MyValueInt = object of HaxeEnum
    MyValueFloat = object of HaxeEnum
    EncodingUTF8 = object of HaxeEnum
    EncodingRawNative = object of HaxeEnum
    ErrorOverflow = object of HaxeEnum
    ErrorOutsideBounds = object of HaxeEnum
    ErrorCustom = object of HaxeEnum
    ErrorBlocked = object of HaxeEnum

proc newMyValueSome(v:int) : MyValueSome =
proc newMyValueInt(v:int) : MyValueInt =
proc newMyValueFloat(v:int) : MyValueFloat =
proc newEncodingUTF8(v:int) : EncodingUTF8 =
proc newEncodingRawNative(v:int) : EncodingRawNative =
proc newErrorOverflow(v:int) : ErrorOverflow =
proc newErrorOutsideBounds(v:int) : ErrorOutsideBounds =
proc newErrorCustom(v:int) : ErrorCustom =
proc newErrorBlocked(v:int) : ErrorBlocked =
type 
    EnumTest = ref object of RootObj
    EnumTestStatic = ref object of RootObj

let EnumTestStaticInst = EnumTestStatic()

proc main(this : EnumTestStatic) : void =
    var value = (33)
    echo(value)
    var value1 = (33)
    echo(value1)

proc `$`(this : EnumTest):string {.inline.} =
    result = "EnumTest" & $this[]

EnumTestStaticInst.main()